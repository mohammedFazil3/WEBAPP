{{!-- presentation layer - routes/templates/training-progress.handlebars --}}
<div class="page-container">
  <div class="training-container">
    <div class="header">
      <div class="logo-container">
        <i class="fas fa-brain"></i>
      </div>
      <h1>Biometric Profile Training</h1>
      <h2>Welcome, {{username}}!</h2>
    </div>
    
    
    <div class="progress-section">
      <!-- Circular Progress Bar -->
      <div class="circular-progress-container">
        <div class="circular-progress">
          <div class="circular-progress-inner">
            <div class="circular-progress-number" id="progressPercentage">0%</div>
          </div>
        </div>
      </div>
      
      <!-- Title under circular progress -->
      <div class="progress-title">Installation Progress</div>
      
      <!-- Linear Progress Bar -->
      <div class="linear-progress-container">
        <div class="linear-progress-bar">
          <div class="linear-progress-fill" id="linearProgressFill"></div>
        </div>
      </div>
      
      <div class="progress-indicator">
        <div class="progress-message" id="statusMessage">Setting up environment...</div>
      </div>
    </div>

        <div class="info-section">
      <div class="info-header">
        <i class="fas fa-info-circle"></i>
        <h3>What's happening now?</h3>
      </div>

      <p class="info-description">Our system is analyzing your typing patterns to create a unique biometric profile.</p>
      
      <div class="info-grid">
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="info-text">Keystroke timing</div>
        </div>
        
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-fingerprint"></i>
          </div>
          <div class="info-text">Pressure patterns</div>
        </div>
        
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-keyboard"></i>
          </div>
          <div class="info-text">Typing cadence</div>
        </div>
        
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-sync-alt"></i>
          </div>
          <div class="info-text">Correction patterns</div>
        </div>
      </div>
      
      <p class="security-note">Enhanced security layer that's uniquely you.</p>
    </div>
    
    <div class="action-buttons" id="completeSection" style="display: none;">
      <button id="cancelButton" class="cancel-button">Cancel</button>
      <button id="continueButton" class="continue-button">Continue</button>
    </div>
  </div>
</div>

<style>
  /* Import Font Awesome for icons */
  @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css');
  
  /* Import Montserrat font */
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');
  
  /* Base styles */
  body {
    font-family: 'Montserrat', sans-serif;
    background-color: #F8F8F8;
    margin: 0;
    padding: 0;
    color: #333;
  }
  
  /* Page container for centering */
  .page-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
  }
  
  /* Card container */
  .training-container {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    width: 100%;
    max-width: 800px;
    padding: 40px;
    margin: 0 auto;
  }
  
  /* Header styling */
  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 40px;
  }
  
  .logo-container {
    background-color: #322549;
    color: white;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .logo-container i {
    font-size: 32px;
  }
  
  h1 {
    color: #322549;
    text-align: center;
    margin: 0 0 10px 0;
    font-size: 30px;
    font-weight: 700;
  }
  
  h2 {
    color: #5A4B92;
    text-align: center;
    margin: 0;
    font-weight: 500;
    font-size: 22px;
  }
  
  /* Progress section */
  .progress-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 0 40px 0;
    width: 100%;
  }
  
  /* Circular Progress Bar Styles */
  .circular-progress-container {
    position: relative;
    width: 180px;
    height: 180px;
    margin: 20px auto 15px;
  }
  
  .circular-progress {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: #5A4B92;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .circular-progress-inner {
    position: absolute;
    width: calc(100% - 30px);
    height: calc(100% - 30px);
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .circular-progress-number {
    font-size: 48px;
    font-weight: 700;
    color: #333;
  }
  
  /* Progress title */
  .progress-title {
    font-size: 24px;
    font-weight: 500;
    color: #666;
    margin: 15px 0 25px;
    text-align: center;
  }
  
  /* Linear Progress Bar Styles */
  .linear-progress-container {
    width: 100%;
    max-width: 600px;
    margin-bottom: 40px;
  }
  
  .linear-progress-bar {
    width: 100%;
    height: 10px;
    background-color: #E0E0E5;
    border-radius: 5px;
    overflow: hidden;
  }
  
  .linear-progress-fill {
    height: 100%;
    background-color: #5A4B92;
    width: 0%;
    transition: width 0.5s ease;
  }
  
  .progress-indicator {
    display: flex;
    align-items: center;
    margin-bottom: 25px;
    justify-content: center;
  }
  
  .progress-message {
    color: #666;
    font-weight: 500;
    font-size: 18px;
    text-align: center;
  }
  
  /* Info section */
  .info-section {
    background-color: #F8F9FA;
    border-radius: 8px;
    padding: 25px;
    margin-bottom: 35px;
    border-left: 4px solid #322549;
  }
  
  .info-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .info-header i {
    color: #5A4B92;
    font-size: 22px;
    margin-right: 10px;
  }
  
  h3 {
    color: #322549;
    margin: 0;
    font-size: 20px;
    font-weight: 600;
  }
  
  .info-description {
    color: #4a5568;
    line-height: 1.5;
    margin: 0 0 20px 0;
    font-size: 15px;
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .info-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 15px 10px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  
  .info-icon {
    background-color: #5A4B92;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .info-icon i {
    font-size: 20px;
  }
  
  .info-text {
    color: #4a5568;
    font-size: 14px;
    line-height: 1.4;
    font-weight: 500;
  }
  
  .security-note {
    font-weight: 500;
    color: #363853;
    text-align: center;
    margin: 10px 0 0 0;
  }
  
  /* Complete section */
  .complete-section {
    width: 100%;
  }
  
  /* Button styles */
  .action-buttons {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 600px;
    margin: 60px auto 0;
  }
  
  .cancel-button {
    background-color: transparent;
    color: #666;
    border: 2px solid #E0E0E5;
    border-radius: 999px;
    padding: 14px 40px;
    font-size: 16px;
    font-family: 'Montserrat', sans-serif;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 140px;
  }
  
  .cancel-button:hover {
    background-color: #f5f5f5;
  }
  
  .continue-button {
    background-color: #2d2550;
    color: white;
    border: none;
    border-radius: 999px;
    padding: 14px 40px;
    font-size: 16px;
    font-family: 'Montserrat', sans-serif;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 140px;
  }
  
  .continue-button:hover {
    background-color: #473660;
  }
  
  /* Pulse animation */
  @keyframes pulse {
    0% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(90, 75, 146, 0.7);
    }
    
    70% {
      transform: scale(1);
      box-shadow: 0 0 0 6px rgba(90, 75, 146, 0);
    }
    
    100% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(90, 75, 146, 0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const progressPercentage = document.getElementById('progressPercentage');
    const statusMessage = document.getElementById('statusMessage');
    const completeSection = document.getElementById('completeSection');
    const continueButton = document.getElementById('continueButton');
    const cancelButton = document.getElementById('cancelButton');
    const circularProgress = document.querySelector('.circular-progress');
    const linearProgressFill = document.getElementById('linearProgressFill');
    
    // Array of status messages to display during installation
    const statusMessages = [
      'Setting up environment...',
      'Installing dependencies...',
      'Configuring security settings...',
      'Optimizing system parameters...',
      'Creating user profile...',
      'Finalizing installation...'
    ];
    
    let jobId = null;
    let currentMessageIndex = 0;
    let checkStatusInterval = null;
    
    // Start the training process
    startTraining();
    
    // Handle continue button click
    continueButton.addEventListener('click', function() {
      // Redirect the browser to the dashboard route
      window.location.href = '/dashboard';
    });
    
    // Handle cancel button click
    cancelButton.addEventListener('click', function() {
      // Redirect to cancel page or show confirmation dialog
      if (confirm('Are you sure you want to cancel the installation?')) {
        window.location.href = '/';
      }
    });
    
    // Function to start the training process
    function startTraining() {
      fetch('/api/start-training', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          username: '{{username}}' 
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success && data.jobId) {
          jobId = data.jobId;
          console.log('Training started with job ID:', jobId);
          
          // Start checking status
          checkTrainingStatus();
          
          // Start rotating messages
          startMessageRotation();
        } else {
          console.error('Failed to start training:', data.error);
          statusMessage.textContent = 'Failed to start training process. Please try again.';
        }
      })
      .catch(error => {
        console.error('Error starting training:', error);
        statusMessage.textContent = 'Error connecting to server. Please try again.';
      });
    }
    
    // Function to check training status
    function checkTrainingStatus() {
      if (!jobId) return;
      
      checkStatusInterval = setInterval(() => {
        fetch(`/api/training-status/${jobId}`)
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              handleStatusUpdate(data.status);
            } else {
              console.error('Failed to get status:', data.error);
            }
          })
          .catch(error => {
            console.error('Error checking status:', error);
          });
      }, 2000); // Check every 2 seconds
    }
    
    // Function to handle status updates
    function handleStatusUpdate(status) {
      // Calculate progress percentage based on status
      let progress = 0;
      
      // If the backend provides progress percentage, use it
      if (status && status.progress !== undefined) {
        progress = status.progress;
      } 
      // Otherwise use status.status or status.state for text-based statuses
      else if (status && (status.status === 'completed' || status.state === 'completed')) {
        progress = 100;
        clearInterval(checkStatusInterval);
        completeTraining();
      } else if (status && (status.status === 'failed' || status.state === 'failed')) {
        clearInterval(checkStatusInterval);
        statusMessage.textContent = 'Training failed. Please try again.';
        return;
      } 
      // If no clear progress indicator, simulate progress
      else {
        const currentProgress = parseInt(progressPercentage.textContent);
        progress = Math.min(currentProgress + 5, 95); // Cap at 95% until completion
      }
      
      // Update progress percentage
      progressPercentage.textContent = Math.floor(progress) + '%';
      
      // Update circular progress bar
      updateCircularProgress(progress);
    }
    
    // Function to update circular progress bar
    function updateCircularProgress(progress) {
      // For 0%, show the full circle filled
      if (progress === 0) {
        circularProgress.style.background = `#5A4B92`;
      } else {
        // Calculate angle for conic gradient
        // Progress starts from top (270 degrees) and goes clockwise
        const startDegree = 270;
        const endDegree = startDegree + (progress / 100 * 360);
        
        circularProgress.style.background = `conic-gradient(
          #5A4B92 ${startDegree}deg ${endDegree > 360 ? 630 : endDegree}deg,
          #E0E0E5 ${endDegree > 360 ? 630 : endDegree}deg ${startDegree + 360}deg
        )`;
      }
      
      // Also update the linear progress bar
      linearProgressFill.style.width = `${progress}%`;
    }
    
    // Function to rotate through status messages
    function startMessageRotation() {
      setInterval(() => {
        currentMessageIndex = (currentMessageIndex + 1) % statusMessages.length;
        statusMessage.textContent = statusMessages[currentMessageIndex];
      }, 3000); // Change message every 3 seconds
    }
    
    // Function to handle training completion
    function completeTraining() {
      // Set final status
      statusMessage.textContent = 'Installation complete!';
      progressPercentage.textContent = '100%';
      updateCircularProgress(100);
      
      // Show completion section with buttons
      setTimeout(() => {
        completeSection.style.display = 'flex';
        
        // Hide the status message when showing the buttons
        statusMessage.style.display = 'none';
      }, 1000);
    }
    
    // Fallback for demo/testing - completes after 20 seconds if no real API response
    setTimeout(() => {
      if (parseInt(progressPercentage.textContent) < 100) {
        clearInterval(checkStatusInterval);
        completeTraining();
      }
    }, 20000);
    
    // Initial circular progress bar update (should show 0%)
    updateCircularProgress(0);
  });
</script>

